package ait.HW_Lesson02_Multithreading.task01;

import java.util.Random;
import java.util.Scanner;
import java.util.concurrent.atomic.AtomicBoolean;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.CopyOnWriteArrayList;
import java.util.List;

public class TarakansRace {
    private static final AtomicInteger winner = new AtomicInteger(-1);
    private static final List<Integer> finishTable = new CopyOnWriteArrayList<>();
    private static final List<Double> finishTimes = new CopyOnWriteArrayList<>();
    private static final AtomicInteger finishedCount = new AtomicInteger(0);
    private static long raceStartTime;

    private static final String[] COLORS = {
            "\u001B[31m", // –ö—Ä–∞—Å–Ω—ã–π
            "\u001B[32m", // –ó–µ–ª–µ–Ω—ã–π
            "\u001B[33m", // –ñ–µ–ª—Ç—ã–π
            "\u001B[34m", // –°–∏–Ω–∏–π
            "\u001B[35m", // –§–∏–æ–ª–µ—Ç–æ–≤—ã–π
            "\u001B[36m", // –ì–æ–ª—É–±–æ–π
            "\u001B[37m", // –ë–µ–ª—ã–π
            "\u001B[91m", // –Ø—Ä–∫–∏–π –∫—Ä–∞—Å–Ω—ã–π
            "\u001B[92m", // –Ø—Ä–∫–∏–π –∑–µ–ª–µ–Ω—ã–π
            "\u001B[93m"  // –Ø—Ä–∫–∏–π –∂–µ–ª—Ç—ã–π
    };
    private static final String RESET = "\u001B[0m";
    private static final String BOLD = "\u001B[1m";

    private static int totalDistance;
    private static int numberOfTarakans;
    private static int[] tarakanProgress;

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.print("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–∞—Ä–∞–∫–∞–Ω–æ–≤: ");
        numberOfTarakans = scanner.nextInt();

        System.out.print("–í–≤–µ–¥–∏—Ç–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Ç–µ—Ä–∞—Ü–∏–π): ");
        totalDistance = scanner.nextInt();

        tarakanProgress = new int[numberOfTarakans];

        System.out.println("\n" + BOLD + "üèÅ –ì–æ–Ω–∫–∞ —Ç–∞—Ä–∞–∫–∞–Ω–æ–≤ –Ω–∞—á–∞–ª–∞—Å—å! üèÅ" + RESET + "\n");

        // –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –≤—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞ –≥–æ–Ω–∫–∏
        raceStartTime = System.currentTimeMillis();

        // –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫–∏-—Ç–∞—Ä–∞–∫–∞–Ω—ã
        Thread[] tarakans = new Thread[numberOfTarakans];
        Thread progressThread = new Thread(new ProgressDisplay(numberOfTarakans));

        for (int i = 0; i < numberOfTarakans; i++) {
            final int tarakanNumber = i + 1;
            tarakans[i] = new Thread(new Tarakan(tarakanNumber, totalDistance, i));
            tarakans[i].start();
        }

        // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        progressThread.start();

        // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ—Ç–æ–∫–æ–≤
        for (Thread tarakan : tarakans) {
            try {
                tarakan.join();
            } catch (InterruptedException e) {
                Thread.currentThread().interrupt();
            }
        }

        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        progressThread.interrupt();

        // –§–∏–Ω–∞–ª—å–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        displayFinalResults();

        scanner.close();
    }

    private static void displayFinalResults() {
        // –û—á–∏—â–∞–µ–º —ç–∫—Ä–∞–Ω –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        System.out.print("\033[2J\033[H");

        System.out.println(BOLD + "üèÜ –§–ò–ù–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ì–û–ù–ö–ò üèÜ" + RESET);
        System.out.println("=".repeat(50));

        // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
        for (int i = 0; i < tarakanProgress.length; i++) {
            String color = COLORS[i % COLORS.length];
            System.out.print(color + "–¢–∞—Ä–∞–∫–∞–Ω #" + (i + 1) + ": " + RESET);
            displayProgressBar(tarakanProgress[i], totalDistance, color);
        }

        System.out.println("\n" + BOLD + "üìã –§–ò–ù–ò–®–ù–ê–Ø –¢–ê–ë–õ–ò–¶–ê:" + RESET);
        System.out.println("-".repeat(60));
        System.out.printf("%-19s %-16s %s%n", "–ú–ï–°–¢–û", "–£–ß–ê–°–¢–ù–ò–ö", "–í–†–ï–ú–Ø");
        System.out.println("-".repeat(60));

        for (int i = 0; i < finishTable.size(); i++) {
            int tarakanNumber = finishTable.get(i);
            double finishTime = finishTimes.get(i);
            String medal = getMedal(i + 1);
            String color = COLORS[(tarakanNumber - 1) % COLORS.length];

            // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫–∏ –±–µ–∑ —Ü–≤–µ—Ç–æ–≤—ã—Ö –∫–æ–¥–æ–≤ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è
            String place = medal + " " + (i + 1) + " –º–µ—Å—Ç–æ:";
            String participant = "–¢–∞—Ä–∞–∫–∞–Ω #" + tarakanNumber;
            String time = String.format("%.3f —Å–µ–∫", finishTime);

            // –í—ã–≤–æ–¥–∏–º —Å —Ü–≤–µ—Ç–æ–º —Ç–æ–ª—å–∫–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
            System.out.printf("%-18s %s%-15s%s %s%n",
                    place,
                    color + BOLD,
                    participant,
                    RESET,
                    time);
        }

        System.out.println("\n" + BOLD + COLORS[1] +
                "üéâ Congratulations to tarakan #" + winner.get() + " (winner) üéâ" + RESET);
    }

    private static String getMedal(int position) {
        switch (position) {
            case 1: return "ü•á";
            case 2: return "ü•à";
            case 3: return "ü•â";
            default: return "üèÖ";
        }
    }

    private static void displayProgressBar(int current, int total, String color) {
        int barLength = 30;
        int filled = (int) ((double) current / total * barLength);

        System.out.print("[");
        System.out.print(color);

        for (int i = 0; i < barLength; i++) {
            if (i < filled) {
                System.out.print("‚ñà");
            } else {
                System.out.print("‚ñë");
            }
        }

        System.out.print(RESET);
        System.out.printf("] %d/%d (%.1f%%)\n", current, total, (double) current / total * 100);
    }

    static class ProgressDisplay implements Runnable {
        private final int numberOfTarakans;

        public ProgressDisplay(int numberOfTarakans) {
            this.numberOfTarakans = numberOfTarakans;
        }

        @Override
        public void run() {
            while (!Thread.currentThread().isInterrupted() && finishedCount.get() < numberOfTarakans) {
                // –û—á–∏—â–∞–µ–º —ç–∫—Ä–∞–Ω
                System.out.print("\033[2J\033[H");

                System.out.println(BOLD + "üèÉ –ñ–ò–í–ê–Ø –ì–û–ù–ö–ê –¢–ê–†–ê–ö–ê–ù–û–í üèÉ" + RESET);
                System.out.println("=".repeat(50));

                for (int i = 0; i < numberOfTarakans; i++) {
                    String color = COLORS[i % COLORS.length];
                    System.out.print(color + "–¢–∞—Ä–∞–∫–∞–Ω #" + (i + 1) + ": " + RESET);
                    displayProgressBar(tarakanProgress[i], totalDistance, color);
                }

                System.out.println("\n" + BOLD + "üéØ –¶–µ–ª—å: " + totalDistance + " –∏—Ç–µ—Ä–∞—Ü–∏–π" + RESET);

                try {
                    Thread.sleep(1); // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ 100–º—Å
                } catch (InterruptedException e) {
                    Thread.currentThread().interrupt();
                    break;
                }
            }
        }
    }

    static class Tarakan implements Runnable {
        private final int number;
        private final int distance;
        private final int progressIndex;
        private final Random random;

        public Tarakan(int number, int distance, int progressIndex) {
            this.number = number;
            this.distance = distance;
            this.progressIndex = progressIndex;
            this.random = new Random();
        }

        @Override
        public void run() {
            for (int iteration = 1; iteration <= distance; iteration++) {
                // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                tarakanProgress[progressIndex] = iteration;

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ñ–∏–Ω–∏—à–∏—Ä–æ–≤–∞–ª –ª–∏ —Ç–∞—Ä–∞–∫–∞–Ω
                if (iteration == distance) {
                    // –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è —Ñ–∏–Ω–∏—à–∞
                    double finishTime = (System.currentTimeMillis() - raceStartTime) / 1000.0;

                    // –î–æ–±–∞–≤–ª—è–µ–º –≤ —Ñ–∏–Ω–∏—à–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
                    finishTable.add(number);
                    finishTimes.add(finishTime);

                    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Ñ–∏–Ω–∏—à–∏—Ä–æ–≤–∞–≤—à–∏—Ö
                    finishedCount.incrementAndGet();

                    // –ü—ã—Ç–∞–µ–º—Å—è —Å—Ç–∞—Ç—å –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–º (—Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–π —Å–º–æ–∂–µ—Ç)
                    if (winner.compareAndSet(-1, number)) {
                        // –ü–µ—Ä–≤—ã–π —Ñ–∏–Ω–∏—à–∏—Ä–æ–≤–∞–≤—à–∏–π —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–º
                    }
                    return;
                }

                // –ó–∞—Å—ã–ø–∞–µ–º –Ω–∞ —Å–ª—É—á–∞–π–Ω–æ–µ –≤—Ä–µ–º—è –æ—Ç 2 –¥–æ 5 –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥
                try {
                    int sleepTime = 2 + random.nextInt(4); // 2-5 –º—Å
                    Thread.sleep(sleepTime);
                } catch (InterruptedException e) {
                    Thread.currentThread().interrupt();
                    return;
                }
            }
        }
    }
}